{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sridu\\\\AtomSridurga\\\\FRONT-END\\\\src\\\\components\\\\MyChatBot.js\",\n  _s = $RefreshSig$();\n// src/components/ChatBot.js\nimport React, { useState } from \"react\";\nimport \"./ChatBot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatBot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [options, setOptions] = useState([\"Get Health Information\", \"Find Nearest Client\"]);\n  const handleSendMessage = () => {\n    if (inputMessage.trim() === \"\") return;\n\n    // Add the user's message to the chat\n    setMessages([...messages, {\n      text: inputMessage,\n      user: \"user\"\n    }]);\n    setInputMessage(\"\");\n\n    // Handle the user's choice\n    handleUserChoice(inputMessage);\n  };\n  const handleUserChoice = choice => {\n    if (options.includes(choice)) {\n      // User chose a valid option\n      const response = `You selected \"${choice}\".`; // Add your logic here\n\n      setMessages([...messages, {\n        text: response,\n        user: \"bot\"\n      }]);\n      setOptions([]); // Clear the options\n\n      // Simulate a delay and then provide the next set of options or continue the conversation\n      setTimeout(() => {\n        const nextOptions = [\"Option 1\", \"Option 2\"]; // Replace with your logic\n        setMessages([...messages, {\n          text: \"What would you like to do next?\",\n          user: \"bot\"\n        }]);\n        setOptions(nextOptions);\n      }, 1000);\n    } else {\n      // User input didn't match any known options\n      const response = \"I'm sorry, I didn't understand your choice. Please select one of the options.\";\n      setMessages([...messages, {\n        text: response,\n        user: \"bot\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-bot-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${message.user}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type your message...\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), options.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSendMessage(option),\n        children: option\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatBot, \"o3Wqyoj8lry8V9J5h06TER8liC4=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","inputMessage","setInputMessage","options","setOptions","handleSendMessage","trim","text","user","handleUserChoice","choice","includes","response","setTimeout","nextOptions","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","length","option","_c","$RefreshReg$"],"sources":["C:/Users/sridu/AtomSridurga/FRONT-END/src/components/MyChatBot.js"],"sourcesContent":["// src/components/ChatBot.js\r\nimport React, { useState } from \"react\";\r\nimport \"./ChatBot.css\";\r\n\r\nconst ChatBot = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputMessage, setInputMessage] = useState(\"\");\r\n  const [options, setOptions] = useState([\r\n    \"Get Health Information\",\r\n    \"Find Nearest Client\",\r\n  ]);\r\n\r\n  const handleSendMessage = () => {\r\n    if (inputMessage.trim() === \"\") return;\r\n\r\n    // Add the user's message to the chat\r\n    setMessages([...messages, { text: inputMessage, user: \"user\" }]);\r\n    setInputMessage(\"\");\r\n\r\n    // Handle the user's choice\r\n    handleUserChoice(inputMessage);\r\n  };\r\n\r\n  const handleUserChoice = (choice) => {\r\n    if (options.includes(choice)) {\r\n      // User chose a valid option\r\n      const response = `You selected \"${choice}\".`; // Add your logic here\r\n\r\n      setMessages([...messages, { text: response, user: \"bot\" }]);\r\n      setOptions([]); // Clear the options\r\n\r\n      // Simulate a delay and then provide the next set of options or continue the conversation\r\n      setTimeout(() => {\r\n        const nextOptions = [\"Option 1\", \"Option 2\"]; // Replace with your logic\r\n        setMessages([...messages, { text: \"What would you like to do next?\", user: \"bot\" }]);\r\n        setOptions(nextOptions);\r\n      }, 1000);\r\n    } else {\r\n      // User input didn't match any known options\r\n      const response = \"I'm sorry, I didn't understand your choice. Please select one of the options.\";\r\n      setMessages([...messages, { text: response, user: \"bot\" }]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-bot-container\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`message ${message.user}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your message...\"\r\n          value={inputMessage}\r\n          onChange={(e) => setInputMessage(e.target.value)}\r\n        />\r\n        <button onClick={handleSendMessage}>Send</button>\r\n      </div>\r\n      {options.length > 0 && (\r\n        <div className=\"options-container\">\r\n          {options.map((option, index) => (\r\n            <button key={index} onClick={() => handleSendMessage(option)}>\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}