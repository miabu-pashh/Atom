{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\FALL-2023\\\\PSD\\\\Psd_Application\\\\Atom\\\\FRONT-END\\\\src\\\\components\\\\DoctorDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./css/DoctorDashboard.css\"; // Create a CSS file for styling\nimport { useNavigate } from \"react-router-dom\";\nimport { useDoctorAnswers } from \"./DoctorAnswersContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DoctorDashboard() {\n  _s();\n  // const navigate = useNavigate();\n  const {\n    addDoctorAnswer\n  } = useDoctorAnswers();\n  const [selectedPatient, setSelectedPatient] = useState(null);\n  const [selectedQuery, setSelectedQuery] = useState(null);\n  const [answerSubmitted, setAnswerSubmitted] = useState(false);\n  const navigate = useNavigate();\n  const [patientsData, setPatientsData] = useState([]);\n  const [queriesData, setQueriesData] = useState([]);\n\n  // // Example data structure\n  // const patientsData = [\n  //   {\n  //     id: 1,\n  //     name: \"John Doe\",\n  //     queries: [\n  //       { id: 1, question: \"How can I improve my health?\" },\n  //       { id: 2, question: \"What should I do to reduce stress?\" },\n  //     ],\n  //   },\n  //   {\n  //     id: 2,\n  //     name: \"Jane Smith\",\n  //     queries: [\n  //       { id: 3, question: \"Is my diet plan suitable for my condition?\" },\n  //       { id: 4, question: \"What exercises can I do for back pain?\" },\n  //     ],\n  //   },\n  //   // Add more patient data as needed\n  // ];\n\n  useEffect(() => {\n    // Fetch patient list from the server when the component mounts\n    fetchPatients();\n    fetchQueries();\n  }, []); // Empty dependency array to run the effect only once\n\n  const fetchPatients = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/getPatientList\");\n      if (response.ok) {\n        const data = await response.json();\n        setPatientsData(data); // Set the retrieved patient list in state\n      } else {\n        throw new Error(\"Failed to fetch patient list\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      // Handle error scenario: Display an error message or perform necessary actions\n    }\n  };\n\n  // const handlePatientClick = (patient) => {\n  //   setSelectedPatient(patient);\n  //   setSelectedQuery(null); // Clear selected query when selecting a new patient\n  //   console.log(\"Selected Patient:\", selectedPatient);\n  // };\n  // const handlePatientClick = (patient) => {\n  //   setSelectedPatient(patient);\n  //   setSelectedQuery(null);\n  //   console.log(\"Selected Patient:\", selectedPatient);\n  // };\n  const fetchQueries = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/Services/Health/getQueriesForDoc\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userName: \"doc\",\n          id: \"1\"\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        setQueriesData(data);\n      } else {\n        throw new Error(\"Failed to fetch queries\");\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const handlePatientClick = patient => {\n    setSelectedPatient(patient);\n    setSelectedQuery(null);\n    const matchingQuery = queryList.find(query => query.patientDetails && query.patientDetails.emailid === patient.emailid && query.patientDetails.fullname === patient.fullname && query.patientDetails.mobileNumber === patient.mobileNumber);\n    if (matchingQuery) {\n      setSelectedQuery(matchingQuery);\n    }\n  };\n  const handleQueryClick = query => {\n    setSelectedQuery(query);\n    console.log(\"Selected Query:\", selectedQuery);\n  };\n  const handleAnswerSubmit = answer => {\n    // Handle submitting the answer to the backend or update state as needed\n    console.log(\"Submitted Answer:\", answer);\n    setAnswerSubmitted(true);\n    addDoctorAnswer(answer); // Add the answer to the context\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Doctor Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"doctor-dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"patients-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Available Patients\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: patientsData.map((patient, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handlePatientClick(patient),\n            children: patient.patientName\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"queries-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Selected Patient's Queries\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), selectedPatient && selectedPatient.queries && selectedPatient.queries.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: selectedPatient.queries.map(query => /*#__PURE__*/_jsxDEV(\"li\", {\n            onClick: () => handleQueryClick(query),\n            children: query.question\n          }, query.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No queries available for the selected patient.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"query-details\",\n        children: selectedQuery ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Query Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: selectedQuery.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: e => {\n              e.preventDefault();\n              const answer = e.target.elements.answer.value;\n              handleAnswerSubmit(answer);\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"answer\",\n              children: \"Your Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"answer\",\n              name: \"answer\",\n              rows: \"4\",\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Submit Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this), answerSubmitted && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dialog-box\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Your answer has been submitted to the patient.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Select a query to view details and post an answer.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(DoctorDashboard, \"8Lmg0W3W6aGy4bhPvZ/5PygtUj4=\", false, function () {\n  return [useDoctorAnswers, useNavigate];\n});\n_c = DoctorDashboard;\nexport default DoctorDashboard;\nvar _c;\n$RefreshReg$(_c, \"DoctorDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useDoctorAnswers","jsxDEV","_jsxDEV","Fragment","_Fragment","DoctorDashboard","_s","addDoctorAnswer","selectedPatient","setSelectedPatient","selectedQuery","setSelectedQuery","answerSubmitted","setAnswerSubmitted","navigate","patientsData","setPatientsData","queriesData","setQueriesData","fetchPatients","fetchQueries","response","fetch","ok","data","json","Error","error","console","method","headers","body","JSON","stringify","userName","id","log","handlePatientClick","patient","matchingQuery","queryList","find","query","patientDetails","emailid","fullname","mobileNumber","handleQueryClick","handleAnswerSubmit","answer","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onClick","patientName","queries","length","question","onSubmit","e","preventDefault","target","elements","value","htmlFor","name","rows","required","type","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/FALL-2023/PSD/Psd_Application/Atom/FRONT-END/src/components/DoctorDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./css/DoctorDashboard.css\"; // Create a CSS file for styling\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDoctorAnswers } from \"./DoctorAnswersContext\";\r\n\r\nfunction DoctorDashboard() {\r\n  // const navigate = useNavigate();\r\n  const { addDoctorAnswer } = useDoctorAnswers();\r\n  const [selectedPatient, setSelectedPatient] = useState(null);\r\n  const [selectedQuery, setSelectedQuery] = useState(null);\r\n\r\n  const [answerSubmitted, setAnswerSubmitted] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const [patientsData, setPatientsData] = useState([]);\r\n  const [queriesData, setQueriesData] = useState([]);\r\n\r\n  // // Example data structure\r\n  // const patientsData = [\r\n  //   {\r\n  //     id: 1,\r\n  //     name: \"John Doe\",\r\n  //     queries: [\r\n  //       { id: 1, question: \"How can I improve my health?\" },\r\n  //       { id: 2, question: \"What should I do to reduce stress?\" },\r\n  //     ],\r\n  //   },\r\n  //   {\r\n  //     id: 2,\r\n  //     name: \"Jane Smith\",\r\n  //     queries: [\r\n  //       { id: 3, question: \"Is my diet plan suitable for my condition?\" },\r\n  //       { id: 4, question: \"What exercises can I do for back pain?\" },\r\n  //     ],\r\n  //   },\r\n  //   // Add more patient data as needed\r\n  // ];\r\n\r\n  useEffect(() => {\r\n    // Fetch patient list from the server when the component mounts\r\n    fetchPatients();\r\n    fetchQueries();\r\n  }, []); // Empty dependency array to run the effect only once\r\n\r\n  const fetchPatients = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/Services/Health/getPatientList\"\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setPatientsData(data); // Set the retrieved patient list in state\r\n      } else {\r\n        throw new Error(\"Failed to fetch patient list\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      // Handle error scenario: Display an error message or perform necessary actions\r\n    }\r\n  };\r\n\r\n  // const handlePatientClick = (patient) => {\r\n  //   setSelectedPatient(patient);\r\n  //   setSelectedQuery(null); // Clear selected query when selecting a new patient\r\n  //   console.log(\"Selected Patient:\", selectedPatient);\r\n  // };\r\n  // const handlePatientClick = (patient) => {\r\n  //   setSelectedPatient(patient);\r\n  //   setSelectedQuery(null);\r\n  //   console.log(\"Selected Patient:\", selectedPatient);\r\n  // };\r\n  const fetchQueries = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://localhost:8080/Services/Health/getQueriesForDoc\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            userName: \"doc\",\r\n            id: \"1\",\r\n          }),\r\n        }\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(data);\r\n        setQueriesData(data);\r\n      } else {\r\n        throw new Error(\"Failed to fetch queries\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n \r\n  const handlePatientClick = (patient) => {\r\n    setSelectedPatient(patient);\r\n    setSelectedQuery(null);\r\n\r\n    const matchingQuery = queryList.find(\r\n      (query) =>\r\n        query.patientDetails &&\r\n        query.patientDetails.emailid === patient.emailid &&\r\n        query.patientDetails.fullname === patient.fullname &&\r\n        query.patientDetails.mobileNumber === patient.mobileNumber\r\n    );\r\n\r\n    if (matchingQuery) {\r\n      setSelectedQuery(matchingQuery);\r\n    }\r\n  };\r\n\r\n  const handleQueryClick = (query) => {\r\n    setSelectedQuery(query);\r\n    console.log(\"Selected Query:\", selectedQuery);\r\n  };\r\n\r\n  const handleAnswerSubmit = (answer) => {\r\n    // Handle submitting the answer to the backend or update state as needed\r\n    console.log(\"Submitted Answer:\", answer);\r\n    setAnswerSubmitted(true);\r\n    addDoctorAnswer(answer); // Add the answer to the context\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>Doctor Dashboard</h1>\r\n      </div>\r\n\r\n      <div className=\"doctor-dashboard\">\r\n        {/* Available Patients List */}\r\n        <div className=\"patients-list\">\r\n          <h2>Available Patients</h2>\r\n          <ul>\r\n            {patientsData.map((patient, index) => (\r\n              <li key={index} onClick={() => handlePatientClick(patient)}>\r\n                {patient.patientName}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        {/* Selected Patient's Queries */}\r\n        {/* <div className=\"queries-list\">\r\n          <h2>Selected Patient's Queries</h2>\r\n          {selectedPatient ? (\r\n            <ul>\r\n              {selectedPatient.queries.map((query) => (\r\n                <li key={query.id} onClick={() => handleQueryClick(query)}>\r\n                  {query.question}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>Select a patient to view their queries.</p>\r\n          )}\r\n        </div> */}\r\n        <div className=\"queries-list\">\r\n          <h2>Selected Patient's Queries</h2>\r\n          {selectedPatient &&\r\n          selectedPatient.queries &&\r\n          selectedPatient.queries.length > 0 ? (\r\n            <ul>\r\n              {selectedPatient.queries.map((query) => (\r\n                <li key={query.id} onClick={() => handleQueryClick(query)}>\r\n                  {query.question}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <p>No queries available for the selected patient.</p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Selected Query Details and Answer Form */}\r\n        <div className=\"query-details\">\r\n          {selectedQuery ? (\r\n            <>\r\n              <h2>Query Details</h2>\r\n              <p>{selectedQuery.question}</p>\r\n              <form\r\n                onSubmit={(e) => {\r\n                  e.preventDefault();\r\n                  const answer = e.target.elements.answer.value;\r\n                  handleAnswerSubmit(answer);\r\n                }}>\r\n                <label htmlFor=\"answer\">Your Answer:</label>\r\n                <textarea id=\"answer\" name=\"answer\" rows=\"4\" required />\r\n                <button type=\"submit\">Submit Answer</button>\r\n              </form>\r\n              {/* Dialog box to show the answer submission */}\r\n              {answerSubmitted && (\r\n                <div className=\"dialog-box\">\r\n                  <p>Your answer has been submitted to the patient.</p>\r\n                  {/* You can add additional content or close button here */}\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <p>Select a query to view details and post an answer.</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DoctorDashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}