{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sridu\\\\AtomSridurga\\\\FRONT-END\\\\src\\\\components\\\\MyChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./css/ChatBotIcon.css\"; // Import the CSS for the overlay\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [chatOpen, setChatOpen] = useState(false);\n  const [inputText, setInputText] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [conversationState, setConversationState] = useState(\"greeting\");\n  const [isAskingName, setIsAskingName] = useState(false);\n\n  // Sample data for doctors and clinics\n  const doctorClinicData = {\n    '12345': {\n      doctors: [{\n        name: 'Dr. Smith',\n        specialty: 'Cardiologist'\n      }, {\n        name: 'Dr. Johnson',\n        specialty: 'Dermatologist'\n      }],\n      clinics: [{\n        name: 'Healthy Clinic',\n        address: '123 Main St'\n      }, {\n        name: 'Sunshine Clinic',\n        address: '456 Elm St'\n      }]\n    },\n    '54321': {\n      doctors: [{\n        name: 'Dr. Brown',\n        specialty: 'Pediatrician'\n      }, {\n        name: 'Dr. Lee',\n        specialty: 'Ophthalmologist'\n      }],\n      clinics: [{\n        name: \"Kid's Clinic\",\n        address: '789 Oak St'\n      }, {\n        name: 'Vision Care Center',\n        address: '101 Pine St'\n      }]\n    }\n    // Add more data for other pin codes\n  };\n\n  const toggleChatWindow = () => {\n    setChatOpen(!chatOpen);\n    if (!chatOpen) {\n      // If the chat window is opening, initiate the conversation with a greeting\n      setConversationState(\"greeting\");\n      setIsAskingName(false);\n      setMessages([]); // Clear previous messages\n    }\n  };\n\n  // Function to handle user input for \"Get Health information\"\n  const handleGetHealthInfo = () => {\n    const healthMessage = {\n      type: 'bot',\n      text: 'You selected \"Get Health information.\" Here is some health information...'\n    };\n    setMessages(prevMessages => [...prevMessages, healthMessage]);\n    // Add logic for health information here\n    setConversationState('getHealthInfo');\n  };\n\n  // Function to handle user input for \"Find Nearest Client\"\n  const handleFindNearestClient = () => {\n    const pinCodeRequestMessage = {\n      type: 'bot',\n      text: 'Please enter the pin code of your location:'\n    };\n    setMessages(prevMessages => [...prevMessages, pinCodeRequestMessage]);\n    setConversationState('askPinCode');\n  };\n  const handleUserInput = text => {\n    const userMessage = {\n      type: 'user',\n      text\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    if (isAskingName) {\n      // Handle the case where we are asking for the user's name\n      const userName = text;\n      const nameMessage = {\n        type: 'bot',\n        text: `Nice to meet you, ${userName}! What would you like to know?`\n      };\n      setMessages(prevMessages => [...prevMessages, nameMessage]);\n      const optionsMessage = {\n        type: 'bot',\n        buttons: [{\n          text: 'Get Health information',\n          onClick: () => handleGetHealthInfo('Get Health information')\n        }, {\n          text: 'Find Nearest Client',\n          onClick: () => handleFindNearestClient('Find Nearest Client')\n        }]\n      };\n      setMessages(prevMessages => [...prevMessages, optionsMessage]);\n      setConversationState(\"options\");\n      setIsAskingName(false);\n    } else {\n      // Handle the conversation based on the current state\n      switch (conversationState) {\n        case \"greeting\":\n          // Greet the user and ask for their name\n          if (text.toLowerCase() === \"Get Health information\" || text.toLowerCase() === \"Find Nearest Client\") {\n            // If the user's input matches one of the options, proceed accordingly\n            handleUserInput(text);\n          } else {\n            const greetingMessage = {\n              type: 'bot',\n              text: 'Hello! What is your name?'\n            };\n            setMessages(prevMessages => [...prevMessages, greetingMessage]);\n            setIsAskingName(true);\n          }\n          break;\n        case \"options\":\n          // Handle user options and responses\n          if (text.toLowerCase() === \"Get Health information\") {\n            // User selected \"Get Health information\"\n            const healthMessage = {\n              type: 'bot',\n              text: 'You selected \"Get Health information.\" Here is some health information...'\n            };\n            setMessages(prevMessages => [...prevMessages, healthMessage]);\n            // You can add the logic for providing health information here\n          } else if (text.toLowerCase() === \"Find Nearest Client\") {\n            // User selected \"Find Nearest Client\"\n            const pinCodeRequestMessage = {\n              type: 'bot',\n              text: 'Please enter the pin code of your location:'\n            };\n            setMessages(prevMessages => [...prevMessages, pinCodeRequestMessage]);\n            setConversationState(\"askPinCode\"); // This is important to transition to asking for the pin code.\n          } else {\n            // User input doesn't match any option\n            const invalidMessage = {\n              type: 'bot',\n              text: \"I'm sorry, I didn't understand your choice. Please select one of the options.\"\n            };\n            setMessages(prevMessages => [...prevMessages, invalidMessage]);\n          }\n          break;\n        case \"askPinCode\":\n          const pinCode = text;\n          const locationData = doctorClinicData[pinCode];\n          if (locationData) {\n            const clinics = locationData.clinics;\n            const clinicResponseMessage = {\n              type: 'bot',\n              text: `Here are the clinics near your location (${pinCode}):`,\n              buttons: clinics.map(clinic => ({\n                text: `${clinic.name} - ${clinic.address}`,\n                onClick: () => handleUserInput(`Tell me more about ${clinic.name}`)\n              }))\n            };\n            setMessages(prevMessages => [...prevMessages, clinicResponseMessage]);\n          } else {\n            const invalidPinCodeMessage = {\n              type: 'bot',\n              text: \"I'm sorry, I couldn't find information for that pin code. Please enter a valid pin code.\"\n            };\n            setMessages(prevMessages => [...prevMessages, invalidPinCodeMessage]);\n          }\n          setConversationState('clinicDetails');\n          break;\n        case 'clinicDetails':\n          // Handle the clinic details here\n          const selectedClinic = text; // This should be the name of the selected clinic\n          // You can retrieve data related to the selected clinic and construct a response\n          // For now, let's assume a sample response\n          const sampleClinicResponse = {\n            type: 'bot',\n            text: `Here are the details for ${selectedClinic}:\n              Address: 123 Main St\n              Phone: 123-456-7890`\n          };\n          setMessages(prevMessages => [...prevMessages, sampleClinicResponse]);\n          break;\n        default:\n          break;\n      }\n    }\n    setInputText('');\n  };\n\n  // Determine the text for the button based on the conversation state\n  //const buttonLabel = conversationState === 'greeting' ? \"Hello, what's your name?\" : 'Chat';\n  const buttonLabel = conversationState === 'greeting' ? \"\" : 'Chat';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatbotContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `ChatbotIcon ${chatOpen ? 'active' : ''}`,\n        onClick: toggleChatWindow,\n        children: buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), chatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ChatWindow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ChatMessages\",\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: message.type,\n            children: message.type === 'bot' && message.buttons ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ButtonContainer\",\n              children: message.buttons.map((button, buttonIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: button.onClick,\n                children: button.text\n              }, buttonIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 21\n            }, this) : message.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ChatInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message...\",\n            value: inputText,\n            onChange: e => setInputText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUserInput(inputText),\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"45V2A40Zfmg7HmwS+v/xDvYCGLA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","chatOpen","setChatOpen","inputText","setInputText","messages","setMessages","conversationState","setConversationState","isAskingName","setIsAskingName","doctorClinicData","doctors","name","specialty","clinics","address","toggleChatWindow","handleGetHealthInfo","healthMessage","type","text","prevMessages","handleFindNearestClient","pinCodeRequestMessage","handleUserInput","userMessage","userName","nameMessage","optionsMessage","buttons","onClick","toLowerCase","greetingMessage","invalidMessage","pinCode","locationData","clinicResponseMessage","map","clinic","invalidPinCodeMessage","selectedClinic","sampleClinicResponse","buttonLabel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","index","button","buttonIndex","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/sridu/AtomSridurga/FRONT-END/src/components/MyChatBot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport \"./css/ChatBotIcon.css\"; // Import the CSS for the overlay\r\n\r\nfunction App() {\r\n  const [chatOpen, setChatOpen] = useState(false);\r\n  const [inputText, setInputText] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [conversationState, setConversationState] = useState(\"greeting\");\r\n  const [isAskingName, setIsAskingName] = useState(false);\r\n\r\n  // Sample data for doctors and clinics\r\n  const doctorClinicData = {\r\n    '12345': {\r\n      doctors: [\r\n        { name: 'Dr. Smith', specialty: 'Cardiologist' },\r\n        { name: 'Dr. Johnson', specialty: 'Dermatologist' },\r\n      ],\r\n      clinics: [\r\n        { name: 'Healthy Clinic', address: '123 Main St' },\r\n        { name: 'Sunshine Clinic', address: '456 Elm St' },\r\n      ],\r\n    },\r\n    '54321': {\r\n      doctors: [\r\n        { name: 'Dr. Brown', specialty: 'Pediatrician' },\r\n        { name: 'Dr. Lee', specialty: 'Ophthalmologist' },\r\n      ],\r\n      clinics: [\r\n        { name: \"Kid's Clinic\", address: '789 Oak St' },\r\n        { name: 'Vision Care Center', address: '101 Pine St' },\r\n      ],\r\n    },\r\n    // Add more data for other pin codes\r\n  };\r\n\r\n  const toggleChatWindow = () => {\r\n    setChatOpen(!chatOpen);\r\n\r\n    if (!chatOpen) {\r\n      // If the chat window is opening, initiate the conversation with a greeting\r\n      setConversationState(\"greeting\");\r\n      setIsAskingName(false);\r\n      setMessages([]); // Clear previous messages\r\n    }\r\n  };\r\n\r\n  // Function to handle user input for \"Get Health information\"\r\n  const handleGetHealthInfo = () => {\r\n    const healthMessage = {\r\n      type: 'bot',\r\n      text: 'You selected \"Get Health information.\" Here is some health information...',\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, healthMessage]);\r\n    // Add logic for health information here\r\n    setConversationState('getHealthInfo');\r\n  };\r\n\r\n  // Function to handle user input for \"Find Nearest Client\"\r\n  const handleFindNearestClient = () => {\r\n    const pinCodeRequestMessage = {\r\n      type: 'bot',\r\n      text: 'Please enter the pin code of your location:',\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, pinCodeRequestMessage]);\r\n    setConversationState('askPinCode');\r\n  };\r\n\r\n  const handleUserInput = (text) => {\r\n    const userMessage = {\r\n      type: 'user',\r\n      text,\r\n    };\r\n\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n    if (isAskingName) {\r\n      // Handle the case where we are asking for the user's name\r\n      const userName = text;\r\n      const nameMessage = {\r\n        type: 'bot',\r\n        text: `Nice to meet you, ${userName}! What would you like to know?`,\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, nameMessage]);\r\n\r\n      const optionsMessage = {\r\n        type: 'bot',\r\n        buttons: [\r\n          {\r\n            text: 'Get Health information',\r\n            onClick: () => handleGetHealthInfo('Get Health information'),\r\n          },\r\n          {\r\n            text: 'Find Nearest Client',\r\n            onClick: () => handleFindNearestClient('Find Nearest Client'),\r\n          },\r\n        ],\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, optionsMessage]);\r\n\r\n      setConversationState(\"options\");\r\n      setIsAskingName(false);\r\n    } else {\r\n      // Handle the conversation based on the current state\r\n      switch (conversationState) {\r\n        case \"greeting\":\r\n          // Greet the user and ask for their name\r\n          if (text.toLowerCase() === \"Get Health information\" || text.toLowerCase() === \"Find Nearest Client\") {\r\n            // If the user's input matches one of the options, proceed accordingly\r\n            handleUserInput(text);\r\n          } else {\r\n            const greetingMessage = {\r\n              type: 'bot',\r\n              text: 'Hello! What is your name?',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, greetingMessage]);\r\n            setIsAskingName(true);\r\n          }\r\n          break;\r\n\r\n        case \"options\":\r\n          // Handle user options and responses\r\n          if (text.toLowerCase() === \"Get Health information\") {\r\n            // User selected \"Get Health information\"\r\n            const healthMessage = {\r\n              type: 'bot',\r\n              text: 'You selected \"Get Health information.\" Here is some health information...',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, healthMessage]);\r\n            // You can add the logic for providing health information here\r\n          } else if (text.toLowerCase() === \"Find Nearest Client\") {\r\n            // User selected \"Find Nearest Client\"\r\n            const pinCodeRequestMessage = {\r\n              type: 'bot',\r\n              text: 'Please enter the pin code of your location:',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, pinCodeRequestMessage]);\r\n            setConversationState(\"askPinCode\"); // This is important to transition to asking for the pin code.\r\n          } else {\r\n            // User input doesn't match any option\r\n            const invalidMessage = {\r\n              type: 'bot',\r\n              text: \"I'm sorry, I didn't understand your choice. Please select one of the options.\",\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, invalidMessage]);\r\n          }\r\n          break;\r\n\r\n        case \"askPinCode\":\r\n          const pinCode = text;\r\n          const locationData = doctorClinicData[pinCode];\r\n          if (locationData) {\r\n            const clinics = locationData.clinics;\r\n\r\n            const clinicResponseMessage = {\r\n              type: 'bot',\r\n              text: `Here are the clinics near your location (${pinCode}):`,\r\n              buttons: clinics.map((clinic) => ({\r\n                text: `${clinic.name} - ${clinic.address}`,\r\n                onClick: () => handleUserInput(`Tell me more about ${clinic.name}`),\r\n              })),\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, clinicResponseMessage]);\r\n          } else {\r\n            const invalidPinCodeMessage = {\r\n              type: 'bot',\r\n              text: \"I'm sorry, I couldn't find information for that pin code. Please enter a valid pin code.\",\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, invalidPinCodeMessage]);\r\n          }\r\n          setConversationState('clinicDetails');\r\n          break;\r\n\r\n        case 'clinicDetails':\r\n          // Handle the clinic details here\r\n          const selectedClinic = text; // This should be the name of the selected clinic\r\n          // You can retrieve data related to the selected clinic and construct a response\r\n          // For now, let's assume a sample response\r\n          const sampleClinicResponse = {\r\n            type: 'bot',\r\n            text: `Here are the details for ${selectedClinic}:\r\n              Address: 123 Main St\r\n              Phone: 123-456-7890`,\r\n          };\r\n          setMessages((prevMessages) => [...prevMessages, sampleClinicResponse]);\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    setInputText('');\r\n  };\r\n\r\n  // Determine the text for the button based on the conversation state\r\n  //const buttonLabel = conversationState === 'greeting' ? \"Hello, what's your name?\" : 'Chat';\r\n  const buttonLabel = conversationState === 'greeting' ? \"\" : 'Chat';\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"ChatbotContainer\">\r\n        <button className={`ChatbotIcon ${chatOpen ? 'active' : ''}`} onClick={toggleChatWindow}>\r\n          {buttonLabel}\r\n          \r\n        </button>\r\n        {chatOpen && (\r\n          <div className=\"ChatWindow\">\r\n            <div className=\"ChatMessages\">\r\n              {messages.map((message, index) => (\r\n                <div key={index} className={message.type}>\r\n                  {message.type === 'bot' && message.buttons ? (\r\n                    <div className=\"ButtonContainer\">\r\n                      {message.buttons.map((button, buttonIndex) => (\r\n                        <button key={buttonIndex} onClick={button.onClick}>\r\n                          {button.text}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    message.text\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"ChatInput\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type your message...\"\r\n                value={inputText}\r\n                onChange={(e) => setInputText(e.target.value)}\r\n              />\r\n              <button onClick={() => handleUserInput(inputText)}>Send</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}