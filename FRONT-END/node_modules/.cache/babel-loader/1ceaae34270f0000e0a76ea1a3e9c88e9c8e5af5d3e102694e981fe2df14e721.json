{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sridu\\\\AtomSridurga\\\\FRONT-END\\\\src\\\\components\\\\MyChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport \"./css/ChatBotIcon.css\"; // Import the CSS for the overlay\nimport { doctorClinicData } from './data';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [chatOpen, setChatOpen] = useState(false);\n  const [inputText, setInputText] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [conversationState, setConversationState] = useState(\"greeting\");\n  const [isAskingName, setIsAskingName] = useState(false);\n  const toggleChatWindow = () => {\n    setChatOpen(!chatOpen);\n    if (!chatOpen) {\n      // If the chat window is opening, initiate the conversation with a greeting\n      setConversationState(\"greeting\");\n      setIsAskingName(false);\n      setMessages([]); // Clear previous messages\n    }\n  };\n\n  // Function to handle user input for \"Get Health information\"\n  const handleGetHealthInfo = () => {\n    const healthMessage = {\n      type: 'bot',\n      text: 'You selected \"Get Health information.\" Here is some health information...'\n    };\n    setMessages(prevMessages => [...prevMessages, healthMessage]);\n    // Add logic for health information here\n    setConversationState('getHealthInfo');\n  };\n\n  // Function to handle user input for \"Find Nearest Client\"\n  const handleFindNearestClient = () => {\n    const pinCodeRequestMessage = {\n      type: 'bot',\n      text: 'Please enter the pin code of your location:'\n    };\n    setMessages(prevMessages => [...prevMessages, pinCodeRequestMessage]);\n    setConversationState('askPinCode');\n  };\n  const handleUserInput = text => {\n    const userMessage = {\n      type: 'user',\n      text\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    if (isAskingName) {\n      // Handle the case where we are asking for the user's name\n      const userName = text;\n      const nameMessage = {\n        type: 'bot',\n        text: `Nice to meet you, ${userName}! What would you like to know?`\n      };\n      setMessages(prevMessages => [...prevMessages, nameMessage]);\n      const optionsMessage = {\n        type: 'bot',\n        buttons: [{\n          text: 'Get Health information',\n          onClick: () => handleGetHealthInfo('Get Health information')\n        }, {\n          text: 'Find Nearest Client',\n          onClick: () => handleFindNearestClient('Find Nearest Client')\n        }]\n      };\n      setMessages(prevMessages => [...prevMessages, optionsMessage]);\n      setConversationState(\"options\");\n      setIsAskingName(false);\n    } else {\n      // Handle the conversation based on the current state\n      switch (conversationState) {\n        case \"greeting\":\n          // Greet the user and ask for their name\n          if (text.toLowerCase() === \"Get Health information\" || text.toLowerCase() === \"Find Nearest Client\") {\n            // If the user's input matches one of the options, proceed accordingly\n            handleUserInput(text);\n          } else {\n            const greetingMessage = {\n              type: 'bot',\n              text: 'Hello! What is your name?'\n            };\n            setMessages(prevMessages => [...prevMessages, greetingMessage]);\n            setIsAskingName(true);\n          }\n          break;\n        case \"options\":\n          // Handle user options and responses\n          if (text.toLowerCase() === \"Get Health information\") {\n            // User selected \"Get Health information\"\n            const healthMessage = {\n              type: 'bot',\n              text: 'You selected \"Get Health information.\" Here is some health information...'\n            };\n            setMessages(prevMessages => [...prevMessages, healthMessage]);\n            // You can add the logic for providing health information here\n          } else if (text.toLowerCase() === \"Find Nearest Client\") {\n            // User selected \"Find Nearest Client\"\n            const pinCodeRequestMessage = {\n              type: 'bot',\n              text: 'Please enter the pin code of your location:'\n            };\n            setMessages(prevMessages => [...prevMessages, pinCodeRequestMessage]);\n            setConversationState(\"askPinCode\"); // This is important to transition to asking for the pin code.\n          } else {\n            // User input doesn't match any option\n            const invalidMessage = {\n              type: 'bot',\n              text: \"I'm sorry, I didn't understand your choice. Please select one of the options.\"\n            };\n            setMessages(prevMessages => [...prevMessages, invalidMessage]);\n          }\n          break;\n        case \"askPinCode\":\n          console.log('Doctor Clinic Data:', doctorClinicData);\n          const pinCode = text;\n          const locationData = doctorClinicData[pinCode];\n          if (locationData) {\n            const clinics = locationData.clinics;\n            const clinicResponseMessage = {\n              type: 'bot',\n              text: `Here are the clinics near your location (${pinCode}):`,\n              buttons: clinics.map(clinic => ({\n                text: `${clinic.name} - ${clinic.address}`,\n                onClick: () => alert(`You clicked on ${clinic.name}`)\n              }))\n            };\n            setMessages(prevMessages => [...prevMessages, clinicResponseMessage]);\n            // After displaying clinic info, add a new set of options\n            const newOptionsMessage = {\n              type: 'bot',\n              text: 'What else would you like to do?',\n              buttons: [{\n                text: 'Get Health information',\n                onClick: () => handleGetHealthInfo('Get Health information')\n              }, {\n                text: 'Find Nearest Client',\n                onClick: () => handleFindNearestClient('Find Nearest Client')\n              }]\n            };\n            setMessages(prevMessages => [...prevMessages, newOptionsMessage]);\n            setConversationState('options');\n          } else {\n            const invalidPinCodeMessage = {\n              type: 'bot',\n              text: \"I'm sorry, I couldn't find information for that pin code. Please enter a valid pin code.\"\n            };\n            setMessages(prevMessages => [...prevMessages, invalidPinCodeMessage]);\n          }\n          break;\n        default:\n          break;\n      }\n    }\n    setInputText('');\n  };\n\n  // Determine the text for the button based on the conversation state\n  const buttonLabel = conversationState === 'greeting' ? \"\" : 'Chat';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ChatbotContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `ChatbotIcon ${chatOpen ? 'active' : ''}`,\n        onClick: toggleChatWindow,\n        children: buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), chatOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ChatWindow\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ChatMessages\",\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: message.type,\n            children: message.type === 'bot' && message.buttons ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ButtonContainer\",\n              children: message.buttons.map((button, buttonIndex) => /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: button.onClick,\n                children: button.text\n              }, buttonIndex, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 21\n            }, this) : message.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ChatInput\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your message...\",\n            value: inputText,\n            onChange: e => setInputText(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUserInput(inputText),\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"45V2A40Zfmg7HmwS+v/xDvYCGLA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","doctorClinicData","jsxDEV","_jsxDEV","App","_s","chatOpen","setChatOpen","inputText","setInputText","messages","setMessages","conversationState","setConversationState","isAskingName","setIsAskingName","toggleChatWindow","handleGetHealthInfo","healthMessage","type","text","prevMessages","handleFindNearestClient","pinCodeRequestMessage","handleUserInput","userMessage","userName","nameMessage","optionsMessage","buttons","onClick","toLowerCase","greetingMessage","invalidMessage","console","log","pinCode","locationData","clinics","clinicResponseMessage","map","clinic","name","address","alert","newOptionsMessage","invalidPinCodeMessage","buttonLabel","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","index","button","buttonIndex","placeholder","value","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/sridu/AtomSridurga/FRONT-END/src/components/MyChatBot.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport \"./css/ChatBotIcon.css\"; // Import the CSS for the overlay\r\nimport { doctorClinicData } from './data';\r\n\r\nfunction App() {\r\n  const [chatOpen, setChatOpen] = useState(false);\r\n  const [inputText, setInputText] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [conversationState, setConversationState] = useState(\"greeting\");\r\n  const [isAskingName, setIsAskingName] = useState(false);\r\n\r\n  const toggleChatWindow = () => {\r\n    setChatOpen(!chatOpen);\r\n\r\n    if (!chatOpen) {\r\n      // If the chat window is opening, initiate the conversation with a greeting\r\n      setConversationState(\"greeting\");\r\n      setIsAskingName(false);\r\n      setMessages([]); // Clear previous messages\r\n    }\r\n  };\r\n\r\n  // Function to handle user input for \"Get Health information\"\r\n  const handleGetHealthInfo = () => {\r\n    const healthMessage = {\r\n      type: 'bot',\r\n      text: 'You selected \"Get Health information.\" Here is some health information...',\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, healthMessage]);\r\n    // Add logic for health information here\r\n    setConversationState('getHealthInfo');\r\n  };\r\n\r\n  // Function to handle user input for \"Find Nearest Client\"\r\n  const handleFindNearestClient = () => {\r\n    const pinCodeRequestMessage = {\r\n      type: 'bot',\r\n      text: 'Please enter the pin code of your location:',\r\n    };\r\n    setMessages((prevMessages) => [...prevMessages, pinCodeRequestMessage]);\r\n    setConversationState('askPinCode');\r\n  };\r\n\r\n  const handleUserInput = (text) => {\r\n    const userMessage = {\r\n      type: 'user',\r\n      text,\r\n    };\r\n\r\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\r\n\r\n    if (isAskingName) {\r\n      // Handle the case where we are asking for the user's name\r\n      const userName = text;\r\n      const nameMessage = {\r\n        type: 'bot',\r\n        text: `Nice to meet you, ${userName}! What would you like to know?`,\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, nameMessage]);\r\n\r\n      const optionsMessage = {\r\n        type: 'bot',\r\n        buttons: [\r\n          {\r\n            text: 'Get Health information',\r\n            onClick: () => handleGetHealthInfo('Get Health information'),\r\n          },\r\n          {\r\n            text: 'Find Nearest Client',\r\n            onClick: () => handleFindNearestClient('Find Nearest Client'),\r\n          },\r\n        ],\r\n      };\r\n      setMessages((prevMessages) => [...prevMessages, optionsMessage]);\r\n\r\n      setConversationState(\"options\");\r\n      setIsAskingName(false);\r\n    } else {\r\n      // Handle the conversation based on the current state\r\n      switch (conversationState) {\r\n        case \"greeting\":\r\n          // Greet the user and ask for their name\r\n          if (text.toLowerCase() === \"Get Health information\" || text.toLowerCase() === \"Find Nearest Client\") {\r\n            // If the user's input matches one of the options, proceed accordingly\r\n            handleUserInput(text);\r\n          } else {\r\n            const greetingMessage = {\r\n              type: 'bot',\r\n              text: 'Hello! What is your name?',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, greetingMessage]);\r\n            setIsAskingName(true);\r\n          }\r\n          break;\r\n\r\n        case \"options\":\r\n          // Handle user options and responses\r\n          if (text.toLowerCase() === \"Get Health information\") {\r\n            // User selected \"Get Health information\"\r\n            const healthMessage = {\r\n              type: 'bot',\r\n              text: 'You selected \"Get Health information.\" Here is some health information...',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, healthMessage]);\r\n            // You can add the logic for providing health information here\r\n          } else if (text.toLowerCase() === \"Find Nearest Client\") {\r\n            // User selected \"Find Nearest Client\"\r\n            const pinCodeRequestMessage = {\r\n              type: 'bot',\r\n              text: 'Please enter the pin code of your location:',\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, pinCodeRequestMessage]);\r\n            setConversationState(\"askPinCode\"); // This is important to transition to asking for the pin code.\r\n          } else {\r\n            // User input doesn't match any option\r\n            const invalidMessage = {\r\n              type: 'bot',\r\n              text: \"I'm sorry, I didn't understand your choice. Please select one of the options.\",\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, invalidMessage]);\r\n          }\r\n          break;\r\n\r\n        case \"askPinCode\":\r\n          console.log('Doctor Clinic Data:', doctorClinicData);\r\n\r\n          const pinCode = text;\r\n          const locationData = doctorClinicData[pinCode];\r\n          \r\n          if (locationData) {\r\n            const clinics = locationData.clinics;\r\n\r\n            const clinicResponseMessage = {\r\n              type: 'bot',\r\n              text: `Here are the clinics near your location (${pinCode}):`,\r\n              buttons: clinics.map((clinic) => ({\r\n                text: `${clinic.name} - ${clinic.address}`,\r\n                onClick: () => alert(`You clicked on ${clinic.name}`),\r\n              })),\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, clinicResponseMessage]);\r\n            // After displaying clinic info, add a new set of options\r\n          const newOptionsMessage = {\r\n            type: 'bot',\r\n            text: 'What else would you like to do?',\r\n            buttons: [\r\n              {\r\n                text: 'Get Health information',\r\n                onClick: () => handleGetHealthInfo('Get Health information'),\r\n              },\r\n              {\r\n                text: 'Find Nearest Client',\r\n                onClick: () => handleFindNearestClient('Find Nearest Client'),\r\n              },\r\n            ],\r\n          };\r\n          setMessages((prevMessages) => [...prevMessages, newOptionsMessage]);\r\n\r\n          setConversationState('options');\r\n\r\n\r\n          } \r\n          else {\r\n            const invalidPinCodeMessage = {\r\n              type: 'bot',\r\n              text: \"I'm sorry, I couldn't find information for that pin code. Please enter a valid pin code.\",\r\n            };\r\n            setMessages((prevMessages) => [...prevMessages, invalidPinCodeMessage]);\r\n          }\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    setInputText('');\r\n  };\r\n\r\n  // Determine the text for the button based on the conversation state\r\n  const buttonLabel = conversationState === 'greeting' ? \"\" : 'Chat';\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"ChatbotContainer\">\r\n        <button className={`ChatbotIcon ${chatOpen ? 'active' : ''}`} onClick={toggleChatWindow}>\r\n          {buttonLabel}\r\n        </button>\r\n        {chatOpen && (\r\n          <div className=\"ChatWindow\">\r\n            <div className=\"ChatMessages\">\r\n              {messages.map((message, index) => (\r\n                <div key={index} className={message.type}>\r\n                  {message.type === 'bot' && message.buttons ? (\r\n                    <div className=\"ButtonContainer\">\r\n                      {message.buttons.map((button, buttonIndex) => (\r\n                        <button key={buttonIndex} onClick={button.onClick}>\r\n                          {button.text}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    message.text\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className=\"ChatInput\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type your message...\"\r\n                value={inputText}\r\n                onChange={(e) => setInputText(e.target.value)}\r\n              />\r\n              <button onClick={() => handleUserInput(inputText)}>Send</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}